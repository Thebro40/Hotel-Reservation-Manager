// <auto-generated />
using System;
using Hotel_Reservation_Manager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hotel_Reservation_Manager.data.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230324182719_RemovedUnnecesaryRelationShipsConfigurations")]
    partial class RemovedUnnecesaryRelationShipsConfigurations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = "1202b47e-c444-4806-9610-f0d8639f58bb",
                            Email = "customer0@abv.bg",
                            FirstName = "Jane",
                            IsAdult = false,
                            LastName = "Johnson",
                            PhoneNumber = "683123"
                        },
                        new
                        {
                            Id = "73b4727f-cc23-489a-b419-da9df5461a98",
                            Email = "customer1@abv.bg",
                            FirstName = "Jane",
                            IsAdult = true,
                            LastName = "Johnson",
                            PhoneNumber = "875513"
                        },
                        new
                        {
                            Id = "ec85758b-b4cb-48ad-861c-7dfbdd697b3c",
                            Email = "customer2@abv.bg",
                            FirstName = "John",
                            IsAdult = false,
                            LastName = "Johnson",
                            PhoneNumber = "230755"
                        },
                        new
                        {
                            Id = "b4fdf95c-0009-40ff-bba7-d5a2cb897e72",
                            Email = "customer3@abv.bg",
                            FirstName = "Jack",
                            IsAdult = false,
                            LastName = "Alexandrov",
                            PhoneNumber = "986249"
                        },
                        new
                        {
                            Id = "b98d48e7-b28f-457c-9234-1a42e7953b06",
                            Email = "customer4@abv.bg",
                            FirstName = "Jane",
                            IsAdult = false,
                            LastName = "Alexandrov",
                            PhoneNumber = "908070"
                        });
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AccommodationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasAllInclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("HasBreakfast")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<string>("RoomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerBedAdult")
                        .HasColumnType("money");

                    b.Property<decimal>("PricePerBedChild")
                        .HasColumnType("money");

                    b.Property<string>("ReservationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoomType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique()
                        .HasFilter("[ReservationId] IS NOT NULL");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EGN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8e445864-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa589cbd-ed4e-4129-9879-5a15cd9990a0",
                            EGN = "8603129931",
                            Email = "admin@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "John",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 797, DateTimeKind.Local).AddTicks(2344),
                            IsActive = true,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            MiddleName = "Johnny",
                            NormalizedEmail = "ADMIN@ABV.BG",
                            NormalizedUserName = "ADMIN@ABV.BG",
                            PasswordHash = "AQAAAAEAACcQAAAAEMVeM0tu0k8RIuYt/Y1w5eqYlCvA2s4KKXxmCv/0X4XiQXyLma6FFaeqW72uoz6Rmg==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@abv.bg"
                        },
                        new
                        {
                            Id = "454329d5-c889-4247-a4d8-2519ff138fea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7fef032-5558-4246-93ad-21e031460e25",
                            EGN = "004644",
                            Email = "user0@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Jack",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 804, DateTimeKind.Local).AddTicks(4503),
                            IsActive = true,
                            LastName = "Alexandrov",
                            LockoutEnabled = false,
                            MiddleName = "Alex",
                            NormalizedEmail = "user0@abv.bg",
                            NormalizedUserName = "user0@abv.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEKSh7h3pTJHEhhslQ8GVOZNuc5O/BBCbnDYyEnGdB4vBp0SxA5oJmEn5pUnGXs+T8w==",
                            PhoneNumber = "006956",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user0@abv.bg"
                        },
                        new
                        {
                            Id = "2a8aba74-977c-40c2-919e-d11a8b407cbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0a64779d-fa37-4d5a-b6f3-89fcf632711a",
                            EGN = "008554",
                            Email = "user1@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "John",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 813, DateTimeKind.Local).AddTicks(3456),
                            IsActive = true,
                            LastName = "Alexandrov",
                            LockoutEnabled = false,
                            MiddleName = "Alex",
                            NormalizedEmail = "user1@abv.bg",
                            NormalizedUserName = "user1@abv.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEOpHZHUfQXnvD7XLMyOvFhrrumREmYF/yQwK7fJ5HFZNdVbjhPocGwY2vt0okS93Og==",
                            PhoneNumber = "002423",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user1@abv.bg"
                        },
                        new
                        {
                            Id = "d0b251f0-76ec-4879-afdc-1730c201e01e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11ce9817-c8f6-4ab3-8c5e-8060d86adb71",
                            EGN = "004343",
                            Email = "user2@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 821, DateTimeKind.Local).AddTicks(5480),
                            IsActive = true,
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            MiddleName = "Alex",
                            NormalizedEmail = "user2@abv.bg",
                            NormalizedUserName = "user2@abv.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTDdgP2aTEraxYqpdY9U69lLzvg4sEOEnNS0Jb1PusbE5h1oulisL8UFbeOQV7vAQ==",
                            PhoneNumber = "004839",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user2@abv.bg"
                        },
                        new
                        {
                            Id = "bb074b8e-5b09-4fc1-8718-f426d91b2892",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bda772e7-15cf-490b-9319-064de0aa41c7",
                            EGN = "007607",
                            Email = "user3@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Alex",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 835, DateTimeKind.Local).AddTicks(5006),
                            IsActive = true,
                            LastName = "Alexandrov",
                            LockoutEnabled = false,
                            MiddleName = "Jack",
                            NormalizedEmail = "user3@abv.bg",
                            NormalizedUserName = "user3@abv.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAENEDWOxlTs+icn9MgeCVBHfDlWbJ4USjvujmwOeSsoAI2e6cR+pN5r9rSfbTbr0Lxw==",
                            PhoneNumber = "001740",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user3@abv.bg"
                        },
                        new
                        {
                            Id = "08b8ffc9-068c-4f38-b937-53e9d117833f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae084632-6b3b-4e49-b918-a837c9bfc67f",
                            EGN = "001619",
                            Email = "user4@abv.bg",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            HireDate = new DateTime(2023, 3, 24, 20, 27, 18, 845, DateTimeKind.Local).AddTicks(8912),
                            IsActive = true,
                            LastName = "Alexandrov",
                            LockoutEnabled = false,
                            MiddleName = "Jack",
                            NormalizedEmail = "user4@abv.bg",
                            NormalizedUserName = "user4@abv.bg",
                            PasswordHash = "AQAAAAEAACcQAAAAEHASEeJeS9aw3gm44OMIQbaRD8FUh2Zip0BKWqLVr+o7Pd/5y5/xUdpFa3LXgKZZOw==",
                            PhoneNumber = "005707",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "user4@abv.bg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "5c12a362-f81b-4dc3-a655-8016da334ef5",
                            ConcurrencyStamp = "067f9cf4-e570-468a-9f8f-f074a8f879f3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b4f508d1-2b96-4959-b2bd-de848903eee9",
                            ConcurrencyStamp = "41f3cdb5-511a-4f6f-9bd9-900f418d9e53",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "8e445864-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "5c12a362-f81b-4dc3-a655-8016da334ef5"
                        },
                        new
                        {
                            UserId = "454329d5-c889-4247-a4d8-2519ff138fea",
                            RoleId = "b4f508d1-2b96-4959-b2bd-de848903eee9"
                        },
                        new
                        {
                            UserId = "2a8aba74-977c-40c2-919e-d11a8b407cbe",
                            RoleId = "b4f508d1-2b96-4959-b2bd-de848903eee9"
                        },
                        new
                        {
                            UserId = "d0b251f0-76ec-4879-afdc-1730c201e01e",
                            RoleId = "b4f508d1-2b96-4959-b2bd-de848903eee9"
                        },
                        new
                        {
                            UserId = "bb074b8e-5b09-4fc1-8718-f426d91b2892",
                            RoleId = "b4f508d1-2b96-4959-b2bd-de848903eee9"
                        },
                        new
                        {
                            UserId = "08b8ffc9-068c-4f38-b937-53e9d117833f",
                            RoleId = "b4f508d1-2b96-4959-b2bd-de848903eee9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Customer", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.Reservation", "Reservation")
                        .WithMany("Customers")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Reservation", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Hotel_Reservation_Manager.Data.Models.Room", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.Reservation", "Reservation")
                        .WithOne("Room")
                        .HasForeignKey("Hotel_Reservation_Manager.Data.Models.Room", "ReservationId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel_Reservation_Manager.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hotel_Reservation_Manager.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
